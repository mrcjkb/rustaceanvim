==============================================================================
mason-lspconfig troubleshooting                          *rustaceanvim.mason*

This plugin supports automatically detecting mason.nvim codelldb installations,
but not rust-analyzer.
The main reason for this choice is that it mason.nvim installations of rust-analyzer
will most likely have been built with a different toolchain than your project,
leading to inconsistencies and possibly subtle bugs.

If you want to use a mason.nvim installation anyway, you can do so by specifying
the `server.cmd` setting (see |rustaceanvim.config| and |RustaceanLspClientOpts|):
>lua
  vim.g.rustaceanvim = {
    server = {
      cmd = function()
	local mason_registry = require('mason-registry')
	if mason_registry.is_installed('rust-analyzer') then
	  -- This may need to be tweaked depending on the operating system.
	  local ra = mason_registry.get_package('rust-analyzer')
	  local ra_filename = ra:get_receipt():get().links.bin['rust-analyzer']
	  return { ('%s/%s'):format(ra:get_install_path(), ra_filename or 'rust-analyzer') }
	else
	  -- global installation
	  return { 'rust-analyzer' }
	end
      end,
    },
  }
<

Note that mason-lspconfig.nvim, when configured to ensure rust-analyzer is installed,
assumes you are using the `nvim-lspconfig.rust_analyzer` client.
Some Neovim distributions will automatically call the client's `setup`
function, resulting in a conflict with this plugin.
Make sure you configure mason-lspconfig.nvim not to auto-enable rust-analyzer
(See |mason-lspconfig.setup()|).

vim:tw=78:ts=8:noet:ft=help:norl:
